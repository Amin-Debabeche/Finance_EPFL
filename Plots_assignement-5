from scipy import stats
import numpy as np
import statsmodels.api as sm

slope, intercept, r_value, p_value, std_err = stats.linregress(x,y)

data = pd.read_excel('stocks-2.xlsx')  # load data set

fig, axs = plt.subplots(4, 3,figsize=(50,50))
a=0
b=0

for l in range(1, 13):
    

    
    X = data.iloc[1:-2, 13].values.reshape(-1, 1)  # values converts it into a numpy array
    Y = data.iloc[1:-2, l].values.reshape(-1, 1)  # -1 means that calculate the dimension of rows, but have 1 column
    linear_regressor = LinearRegression()  # create object for the class
    fiit = linear_regressor.fit(X, Y)  # perform linear regression
    Y_pred = linear_regressor.predict(X)  # make predictions
    axs[a, b].scatter(X, Y)
    axs[a, b].plot(X, Y_pred, color='red', label='regression')
    axs[a, b].set_title(str(data.columns[l]))
    
    slope, intercept, r_value, p_value, std_err = stats.linregress(X[:,0],Y[:,0])
    
    
    X = sm.add_constant(X)
    df0 = pd.read_html(sm.OLS(Y, X).fit().summary().tables[0].as_html(),header=0,index_col=0)[0]
    df1 = pd.read_html(sm.OLS(Y, X).fit().summary().tables[1].as_html(),header=0,index_col=0)[0]
    df2 = pd.read_html(sm.OLS(Y, X).fit().summary().tables[2].as_html(),header=0,index_col=0)[0]
    
    cst = str(round(df1.coef[0],2))+'±'+str(round(df1['std err'][0],2)) #constant
    alpha = df1.coef[0]
    slope = str(round(df1.coef[1],2))+'±'+str(round(df1['std err'][1],2)) #slope
    beta = df1.coef[1]
    t_test = str(round(df1.t[1],2)) #t-test
    observations = str(df0.y[4]) #number of observtions
    R_2 = str(round(df0[df0.columns[-1]].iloc[0],2)) # Adjusted squared
    rf = 0.167/100
    jensen_alpha = alpha - rf*(1-beta)
    
    
    axs[a, b].plot([], [], ' ', label="Beta(slope): "+slope)
    axs[a, b].plot([], [], ' ', label="Alpha tilted(intercept): "+cst)
    axs[a, b].plot([], [], ' ', label="T-test: "+t_test)
    axs[a, b].plot([], [], ' ', label="Number of observations: "+observations)
    axs[a, b].plot([], [], ' ', label="Adjusted R^2: "+R_2)
    axs[a, b].plot([], [], ' ', label="Jensen alpha: "+str(jensen_alpha))   
    axs[a, b].legend(loc='best')

    slope, intercept, r_value, p_value, std_err = stats.linregress(X[:,0],Y[:,0])
    b = b + 1
    if b == 3:
        a = a + 1
        b = 0
        
fig.savefig('full_figure.png')
